/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pukm;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Map;
import javax.imageio.ImageIO;
import com.google.zxing.BarcodeFormat;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.EncodeHintType;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.MultiFormatWriter;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.WriterException;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.common.HybridBinarizer;
import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.util.EnumMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
public class CekQrCode extends javax.swing.JFrame {

    String qrCodeData;
    String filePath = "QRCode.png";
    String charset = "UTF-8"; // or "ISO-8859-1"
    File imageFile =null;
    /**
     * Creates new form CekQrCode
     */
    public CekQrCode() {
        initComponents();
    }
    public static BufferedImage loadImage(String ref){
   BufferedImage bimg =null;
 try {
     bimg = ImageIO.read(new File(ref));
 } catch (IOException e) {
     }
    return bimg;
}
public static BufferedImage resize(BufferedImage img, int newW,int newH){
    int w = img.getWidth();
    int h = img.getHeight();
   BufferedImage dimg = dimg = new BufferedImage(newW, newH, img.getType());
   Graphics2D g = dimg.createGraphics();
   g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,
   RenderingHints.VALUE_INTERPOLATION_BILINEAR);
   g.drawImage(img, 0, 0, newW, newH, 0, 0, w, h, null);
   g.dispose();
   return dimg;
}

public static void createQRCode(String qrCodeData, String filePath,
   String charset, Map hintMap, int qrCodeheight, int qrCodewidth)
   throws WriterException, IOException {
   @SuppressWarnings("unchecked")
   BitMatrix matrix = new MultiFormatWriter().encode(
   new String(qrCodeData.getBytes(charset), charset),
   BarcodeFormat.QR_CODE, qrCodewidth, qrCodeheight, hintMap);
   MatrixToImageWriter.writeToFile(matrix, filePath.substring(filePath
   .lastIndexOf('.') + 1), new File(filePath));
}
 
public static String readQRCode(String filePath, String charset, Map hintMap)
   throws FileNotFoundException, IOException, NotFoundException {
   BinaryBitmap binaryBitmap = new BinaryBitmap(new HybridBinarizer(
   new BufferedImageLuminanceSource(
   ImageIO.read(new FileInputStream(filePath)))));
   @SuppressWarnings("unchecked")
   Result qrCodeResult = new MultiFormatReader().decode(binaryBitmap,
   hintMap);
   return qrCodeResult.getText();
}
private void tampilQrCode(){
   qrCodeData=txtQRcode.getText();
   Map<EncodeHintType, ErrorCorrectionLevel> hintMap = new EnumMap<>(EncodeHintType.class);
   hintMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);
try {
   createQRCode(qrCodeData, filePath, charset, hintMap, 800, 800);
   BufferedImage loadImg = loadImage(filePath);
   ImageIcon imageIcon = new ImageIcon(resize(loadImg,lbQrCode.getWidth(),lbQrCode.getHeight()));
   lbQrCode.setIcon(imageIcon);
} catch ( WriterException | IOException ex) {
   Logger.getLogger(CekQrCode.class.getName()).log(Level.SEVERE, null, ex);
}
   System.out.println("QR Code image created successfully!");
try {
   System.out.println("Data read from QR Code: "
         + readQRCode(filePath, charset, hintMap));
} catch ( IOException | NotFoundException ex) {
    Logger.getLogger(CekQrCode.class.getName()).log(Level.SEVERE, null, ex);
  }
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtQRcode = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        lbQrCode = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Generate QR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        lbQrCode.setText("jLabel1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lbQrCode, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addComponent(txtQRcode, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(58, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(txtQRcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jButton1)
                .addGap(49, 49, 49)
                .addComponent(lbQrCode, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                .addGap(59, 59, 59))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       tampilQrCode();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CekQrCode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CekQrCode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CekQrCode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CekQrCode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CekQrCode().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel lbQrCode;
    private javax.swing.JTextField txtQRcode;
    // End of variables declaration//GEN-END:variables
}
